apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-ui
  labels:
    app: {{ .Release.Name }}-ui
    type: ui
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-ui
      type: ui
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-ui
        type: ui
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- with .Values.apex.enabled }}
        - name: wait-for-apex
          image: curlimages/curl:latest
          imagePullPolicy: Always
          command:
            - sh
            - -c
            - |
              URL="http://localhost:12442/healthz/egress"
              while true; do
                echo "Checking $URL..."
                if curl --fail-with-body --silent --show-error --max-time 5 "$URL"; then
                  echo
                  echo "Apex is healthy for egress!"
                  echo
                  break
                else
                  echo
                  echo "Apex is not healthy for egress yet, retrying..."
                  echo
                  sleep 1
                fi
              done
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "acuvity/acuvity-chatbot-ui:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          volumeMounts:
            - name: custom-ca
              mountPath: "/etc/ssl/certs/custom"
              readOnly: true
          env:
          - name: REACT_APP_API_SERVER_BASE_URL
            value: http://localhost:8000/api/v1/chat
          - name: REACT_APP_DESCOPE_PROJECT_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-secrets
                key: descope_project_id
          - name: REQUESTS_CA_BUNDLE # python requests module
            value: /etc/ssl/certs/custom/ca-bundle.crt
          - name: SSL_CERT_FILE # python httpx module
            value: /etc/ssl/certs/custom/ca-bundle.crt
      volumes:
        - name: config
          secret:
            secretName: {{ .Release.Name }}-secrets
        - name: custom-ca
          configMap:
            name: acuvity-ca-bundle
            optional: true
